name: Go Cross-Platform Build and Release

permissions:
  contents: write  # 确保有权写入 release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [ linux, windows, darwin ]  # 支持的操作系统
        goarch: [ amd64, arm64 ]          # 支持的架构
    steps:
      # 检出代码
      - uses: actions/checkout@v4

      # 设置 Go 环境
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      # 构建二进制文件
      - name: Build
        run: |
          EXT=""
          if [ "${{ matrix.goos }}" == "windows" ]; then EXT=".exe"; fi
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -v -o ./receivepay-${{ matrix.goos }}-${{ matrix.goarch }}$EXT ./cmd

      # 运行测试
      - name: Test
        run: go test -v ./...

      # 将二进制文件保存为工件
      - name: Upload binary as artifact
        uses: actions/upload-artifact@v3
        with:
          name: release-binaries
          path: ./receivepay-*

  create_tag:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # 检出代码
      - uses: actions/checkout@v4

      # 获取最新的 commit hash 作为标签
      - name: Create Tag
        id: tag
        run: |
          TAG_NAME=$(date +'%Y%m%d%H%M%S')  # 使用当前时间戳生成唯一标签
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          git tag $TAG_NAME
          git push origin $TAG_NAME

  release:
    runs-on: ubuntu-latest
    needs: create_tag
    steps:
      # 检出代码
      - uses: actions/checkout@v4

      # 下载构建工件
      - name: Download binaries
        uses: actions/download-artifact@v3
        with:
          name: release-binaries

      # 列出文件
      - name: List binaries
        run: ls -al

      # 创建或更新 Release
      - name: Create or Update GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}  # 使用在 create_tag 任务中生成的标签
          name: "Latest Release"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 上传构建好的二进制文件到 Release
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            receivepay-linux-amd64
            receivepay-linux-arm64
            receivepay-windows-amd64.exe
            receivepay-windows-arm64.exe
            receivepay-darwin-amd64
            receivepay-darwin-arm64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
